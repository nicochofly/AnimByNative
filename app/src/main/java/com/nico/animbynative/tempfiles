package com.maxus.animdemo

import android.os.AsyncTask
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Handler
import android.os.Message
import android.util.Log
import android.view.Surface
import android.view.SurfaceHolder
import android.view.SurfaceView
import android.view.ViewGroup

import java.io.File

class MainActivity : AppCompatActivity(), AssertReleaseTask.ReleaseCallback {


    var pngLoader: PngLoader = PngLoader()
    var surface: Surface? = null
    var pos = 0;
    var pngs = arrayOf(
        "frame0.png",
        "frame1.png",
        "frame2.png",
        "frame3.png",
        "frame4.png",
        "frame5.png",
        "frame6.png",
        "frame7.png",
        "frame8.png",
        "frame9.png",
        "frame10.png",
        "frame11.png",
        "frame12.png",
        "frame13.png",
        "frame14.png",
        "frame15.png",
        "frame16.png",
        "frame17.png",
        "frame18.png",
        "frame19.png",
    )

    var handler: Handler = object : Handler() {
        override fun handleMessage(msg: Message) {
            if (msg.what == 1) {
                if (pos >= pngs.size) {
                    pos = 0;
                }
                var path = getExternalFilesDir(null)!!.absolutePath + File.separator + pngs[pos]



                Log.e("cdq","===>$path");
                pngLoader.loadPng(path, surface!!)
                pos += 1
            }

            var message = obtainMessage();
            message.what = 1
            message.obj = surface
            sendMessageDelayed(message, 60)

        }
    }

    private var isPlaying: Boolean = false;
    lateinit var surfaceView: SurfaceView


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        surfaceView = SurfaceView(this)
        surfaceView.layoutParams = ViewGroup.LayoutParams(1024, 1024)
        surfaceView.holder.addCallback(object : SurfaceHolder.Callback {
            override fun surfaceCreated(holder: SurfaceHolder) {
                surface = holder.surface;
                var msg = handler.obtainMessage();
                msg.what = 1;
                msg.obj = surface
                handler.sendMessageDelayed(msg, 1000)
            }

            override fun surfaceChanged(
                holder: SurfaceHolder,
                format: Int,
                width: Int,
                height: Int
            ) {
            }

            override fun surfaceDestroyed(holder: SurfaceHolder) {
            }
        })

        surfaceView.setOnClickListener {
            if (isPlaying) {
                isPlaying = false
                handler.removeCallbacksAndMessages(null)
            } else {
                var msg = handler.obtainMessage();
                msg.what = 1;
                msg.obj = surface
                handler.sendMessageDelayed(msg, 100)
            }
        }

        setContentView(surfaceView)
    }


    override fun onReleaseComplete() {
    }

    override fun onPostCreate(savedInstanceState: Bundle?) {
        super.onPostCreate(savedInstanceState)
        val task = AssertReleaseTask(this, pngs, this)
        task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
    }
}
